import java.util.*;
import java.io.*;
import java.math.BigInteger;
import java.net.*;

public class server {
    static int k=0;
     private static int[] S = new int[256];
       private static int[] T = new int[256];
       private static int keylen;


     public server(byte[] key) throws Exception {
         if (key.length < 1 || key.length > 256) {
           throw new Exception("key must be between 1 and 256 bytes");
         } else {
           keylen = key.length;
           for (int i = 0; i < 256; i++) {
             S[i] = i;
             T[i] = key[i % keylen];
           }
           int j = 0;
           for (int i = 0; i < 256; i++) {
             j = (((j + S[i] + T[i]) % 256+256))%256; 
             S[i] ^= S[j];
             S[j] ^= S[i];
             S[i] ^= S[j];
           }
         }
       }

       public byte[] encrypt(byte[] plaintext) {
         byte[] ciphertext = new byte[plaintext.length];
         byte[] deciphertext = new byte[plaintext.length];
         int i = 0, j = 0, t;
         for (int counter = 0; counter < plaintext.length; counter++) {
           i = (i + 1) % 256;
           j = (j + S[i]) % 256;
           S[i] ^= S[j];
           S[j] ^= S[i];
           S[i] ^= S[j];
           t = (S[i] + S[j]) % 256;
           k = S[t];
           byte ki = (byte)k;
           ciphertext[counter] = (byte) (plaintext[counter] ^ ki);  
           deciphertext[counter]=(byte) (ciphertext[counter]^ki);     
           } 
         System.out.println(k);
         System.out.println(Arrays.toString(plaintext));
         System.out.println(Arrays.toString(deciphertext));
             return ciphertext;
         }
    public static void main(String[] args) throws Exception{
        DatagramSocket serverSocket = new DatagramSocket(9000);
        DatagramSocket serverSocket0 = new DatagramSocket(9999);
        byte[] receiveData0 = new byte[20];
        DatagramPacket receivePacket0 = new DatagramPacket(receiveData0, receiveData0.length);
        serverSocket0.receive(receivePacket0);
        receiveData0 = receivePacket0.getData();
        byte[] keyd = new byte[16];
        for(int t = 0; t < 16; t++)
        {
            keyd[t] = receiveData0[t+4];
        }
        server rc4 = new server(keyd);
        Integer sum = 0;
        int prevnumber = (receiveData0[0]<<24)&0xff000000| (receiveData0[1]<<16)&0x00ff0000|(receiveData0[2]<< 8)&0x0000ff00| (receiveData0[3]<< 0)&0x000000ff;
        int prevprev = prevnumber;
        System.out.println(prevnumber);
        byte[] finaldata=new byte[0];
        int ryt = 0;
        while(true){
        byte[] receiveData = new byte[40];
        byte[] sendData  = new byte[9]; 
        DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
        serverSocket.receive(receivePacket);
        int q = receivePacket.getLength();
        System.out.println(q);
        byte[] a = new byte[q];
        a = receivePacket.getData();
        System.out.println(Arrays.toString(a));
        byte[] b = new byte[q-4];
        for(int n = 0; n < (q-4); n++)
        {
            b[n] = a[n];
        }
        byte[] intc = new byte[4];
        for(int n=0;n<4;n++)
        {
            intc[n]=a[n+q-4];
        }
        int intchkse= (intc[0]<<24)&0xff000000| (intc[1]<<16)&0x00ff0000|(intc[2]<< 8)&0x0000ff00| (intc[3]<< 0)&0x000000ff;
        byte[] keydd = rc4.encrypt(b); //encryption 
        System.out.println(Arrays.toString(keydd));
        int po = keydd.length;
         int gl; 
         gl=(po%4);
         byte[] tem = new byte[gl];
         ByteArrayOutputStream outputStream1 = new ByteArrayOutputStream( );
         outputStream1.write(keydd);
      outputStream1.write(tem);
     byte key[] = outputStream1.toByteArray( );  
         int jk = key.length;
     byte[] key1 = new byte[jk/4];
     byte[] key2 = new byte[jk/4];
     byte[] key3 = new byte[jk/4];
     byte[] key4 = new byte[jk/4];
     int go1=0;
     int go2=1;
     int go3=2;
     int go4=3;
     int come=0;
     while((come<(jk/4)))
     {
      key1[come]=key[go1];
      go1=go1+4;
      come++;
     }
     come=0;
     while((come<(jk/4)))
     {
      key2[come]=key[go2];
      go2=go2+4;
      come++;
     }
     come=0;
     while((come<(jk/4)))
     {
      key3[come]=key[go3];
      go3=go3+4;
      come++;
     }
     come=0;
     while((come<(jk/4)))
     {
      key4[come]=key[go4];
      go4=go4+4;
      come++;
     }
     byte[] intchk = new byte[4];
     for ( int i = 0; i < (jk/4); i++) {          
              intchk[0]=(byte) (key1[i]^intchk[0]);
              intchk[1]=(byte) (key2[i]^intchk[1]);
              intchk[2]=(byte) (key3[i]^intchk[2]);
              intchk[3]=(byte) (key4[i]^intchk[3]);
              
          }
     System.out.println(Arrays.toString(intchk));
     System.out.println(Arrays.toString(intc));
     
     int intchkre= (intchk[0]<<24)&0xff000000| (intchk[1]<<16)&0x00ff0000|(intchk[2]<< 8)&0x0000ff00| (intchk[3]<< 0)&0x000000ff;
     boolean n = ((intchkse == intchkre));
     System.out.println(n);
    if(n && q <= 40)
    {
        System.out.println("H1");
        byte[] temp = new byte[4];
        for(int i = 0; i < 4; i++)
        {
            temp[i] = a[i+1];
        }
        int number= (temp[0]<<24)&0xff000000| (temp[1]<<16)&0x00ff0000|(temp[2]<< 8)&0x0000ff00| (temp[3]<< 0)&0x000000ff;
        int number0= (receiveData0[0]<<24)&0xff000000| (receiveData0[1]<<16)&0x00ff0000|(receiveData0[2]<< 8)&0x0000ff00| (receiveData0[3]<< 0)&0x000000ff;
        if((number == number0) && (number == prevnumber))
        {
            int o=q-10;
            byte[] temp1=new byte[o];
            for(int u = 0; u <( q-10); u++)
            {
                temp1[u] = a[u+6];
            }
             ByteArrayOutputStream outputStream2 = new ByteArrayOutputStream( );
             outputStream2.write(finaldata);
             outputStream2.write(temp1);
             finaldata= outputStream2.toByteArray( );
            System.out.println("Packet is correctly received.");
            sum = number0 + q;
            byte[] array = BigInteger.valueOf(sum).toByteArray();
            receiveData0 = array;
            byte[] packtype = {0x55};
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream( );
            outputStream.write(packtype);
            outputStream.write(array);
            outputStream.write(intchk);
            byte senData[] = outputStream.toByteArray( );
            InetAddress IPAddress = receivePacket.getAddress();
            int port = receivePacket.getPort(); 
            sendData = senData;
            System.out.println(Arrays.toString(sendData)); 
            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port); 
            serverSocket.send(sendPacket);
        }
        else if(number == prevprev)
        {
            System.out.println("Packet is correctly received.");
            byte[] array = BigInteger.valueOf(sum).toByteArray();
            receiveData0 = array;
            byte[] packtype = {0x55};
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream( );
            outputStream.write(packtype);
            outputStream.write(array);
            outputStream.write(intchk);
            byte senData[] = outputStream.toByteArray( );
            InetAddress IPAddress = receivePacket.getAddress();
            int port = receivePacket.getPort(); 
            sendData = senData;
            System.out.println(Arrays.toString(sendData)); 
            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port); 
            serverSocket.send(sendPacket);
        }
        else
        {
            sum = number0;
        }
        prevprev = prevnumber;
        prevnumber = sum;
        if(a[0] == -86)
        {
            System.out.println("The received data is:");
            System.out.println(Arrays.toString(finaldata));
            System.out.println(finaldata.length);
        }
    }
    else
    {
         rc4 = new server(keyd);
    }
    ryt++;
        }
    }
}
