import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import java.io.*; 
import java.net.*;
import sun.misc.*;


public class DES {

	private SecretKey key;
	public String keyitem;
	public DES()
	{
		
	}
	private void generateKey() throws Exception{
		DESKeySpec DESSpec = new DESKeySpec(keyitem.getBytes());//creates object
		SecretKeyFactory keyFactory= SecretKeyFactory.getInstance("DES");//creates spec for DES Algo 
		key=keyFactory.generateSecret(DESSpec);//creates key
	}
		
		private String encrypt(String message) throws Exception{
			//gets cipher object
			Cipher cipher= Cipher.getInstance("DES");
			cipher.init(Cipher.ENCRYPT_MODE, key);
			//gets the raw bytes to encrypt, UTF8 is needed for std character set'
			byte[] UTF8format=message.getBytes("UTF8");
			//System.out.println(stringBytes[0]);
			//encrypt using the cipher
			byte[]rawmessage = cipher.doFinal(UTF8format);
			//System.out.println(raw[0]);
			//converts Base64 for easier display
			BASE64Encoder encoder= new BASE64Encoder();
			String base64 =encoder.encode(rawmessage);
			return base64;
		}
	
	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		String Message="Hello Archana";
		String EncryptedMessage;
		DES des= new DES();
		des.keyitem="This is the key";
		String modifiedSentence;
		  try
			{
		  des.generateKey();
		  Socket clientSocket = new Socket("localhost", 3000);  
		  DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());
          BufferedReader inFromServer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream())); 
		  System.out.println("Original Message \n"+Message);
		  EncryptedMessage=des.encrypt(Message);
          outToServer.writeBytes(EncryptedMessage);  
          System.out.println("the encrypted message is"+EncryptedMessage+"\n");
          modifiedSentence = inFromServer.readLine();  
          System.out.println("FROM SERVER: " + modifiedSentence); 
          clientSocket.close(); 
		}catch(Exception e)
		{
			e.printStackTrace();
		}

	}

}
