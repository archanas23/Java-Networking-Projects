import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import java.io.*;
import java.net.*;
import sun.misc.*;


public class DES {

	private SecretKey key;
	public String keyitem;
	public DES()
	{
		
	}
	private void generateKey() throws Exception{
		DESKeySpec DESSpec = new DESKeySpec(keyitem.getBytes());//creates object
		SecretKeyFactory keyFactory= SecretKeyFactory.getInstance("DES");//creates spec for DES Algo 
		key=keyFactory.generateSecret(DESSpec);//creates key
	}
		

		private String decrypt(String encrypted)throws Exception{
			Cipher cipher= Cipher.getInstance("DES");
			cipher.init(Cipher.DECRYPT_MODE, key);
			BASE64Decoder decoder= new BASE64Decoder();
			byte[] rawmessage =decoder.decodeBuffer(encrypted);
			//decodes the message
			byte[] stringBytes=cipher.doFinal(rawmessage);
			String clear=new String(stringBytes, "UTF8");
			return clear;
		}
	
	public static void main(String[] args) throws Exception{
		// TODO Auto-generated method stub
		String Message="Hello World of DES";
		String Decrypted;
		//String Encrypted;
		DES des= new DES();
        String clientSentence;
        ServerSocket welcomeSocket = new ServerSocket(3000);
		des.keyitem="This is the key";
		while (true) {
			try
			{
				
				des.generateKey();
				Socket serversocket = welcomeSocket.accept();
	            BufferedReader inFromClient = new BufferedReader(new InputStreamReader(serversocket.getInputStream()));
	            DataOutputStream outToClient = new DataOutputStream(serversocket.getOutputStream());
	            clientSentence = inFromClient.readLine();
	            System.out.println("Received: " + clientSentence);

	            Decrypted=des.decrypt(clientSentence);
	            System.out.println("the Decrypted message is "+Decrypted);
	            outToClient.writeBytes(Decrypted);
				System.out.println("The Decrypted-Originally Sent Message \n"+Message);
				
			}catch(Exception e)
			{
				e.printStackTrace();
			}

        }
		

	}

}






